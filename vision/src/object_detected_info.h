/* Auto-generated by genmsg_cpp for file /home/paul/fuerte_workspace/Robotics/mapping/msg/object_detected_info.msg */
#ifndef MAPPING_MESSAGE_OBJECT_DETECTED_INFO_H
#define MAPPING_MESSAGE_OBJECT_DETECTED_INFO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace mapping
{
template <class ContainerAllocator>
struct object_detected_info_ {
  typedef object_detected_info_<ContainerAllocator> Type;

  object_detected_info_()
  : objectDetected(0)
  , object_x(0)
  , object_y(0)
  {
  }

  object_detected_info_(const ContainerAllocator& _alloc)
  : objectDetected(0)
  , object_x(0)
  , object_y(0)
  {
  }

  typedef uint32_t _objectDetected_type;
  uint32_t objectDetected;

  typedef uint32_t _object_x_type;
  uint32_t object_x;

  typedef uint32_t _object_y_type;
  uint32_t object_y;


  typedef boost::shared_ptr< ::mapping::object_detected_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mapping::object_detected_info_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct object_detected_info
typedef  ::mapping::object_detected_info_<std::allocator<void> > object_detected_info;

typedef boost::shared_ptr< ::mapping::object_detected_info> object_detected_infoPtr;
typedef boost::shared_ptr< ::mapping::object_detected_info const> object_detected_infoConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::mapping::object_detected_info_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::mapping::object_detected_info_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace mapping

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::mapping::object_detected_info_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::mapping::object_detected_info_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::mapping::object_detected_info_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0b716302aac05375801fbfea69edc447";
  }

  static const char* value(const  ::mapping::object_detected_info_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0b716302aac05375ULL;
  static const uint64_t static_value2 = 0x801fbfea69edc447ULL;
};

template<class ContainerAllocator>
struct DataType< ::mapping::object_detected_info_<ContainerAllocator> > {
  static const char* value() 
  {
    return "mapping/object_detected_info";
  }

  static const char* value(const  ::mapping::object_detected_info_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::mapping::object_detected_info_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint32 objectDetected\n\
uint32 object_x\n\
uint32 object_y\n\
";
  }

  static const char* value(const  ::mapping::object_detected_info_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::mapping::object_detected_info_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::mapping::object_detected_info_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.objectDetected);
    stream.next(m.object_x);
    stream.next(m.object_y);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct object_detected_info_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mapping::object_detected_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::mapping::object_detected_info_<ContainerAllocator> & v) 
  {
    s << indent << "objectDetected: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.objectDetected);
    s << indent << "object_x: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.object_x);
    s << indent << "object_y: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.object_y);
  }
};


} // namespace message_operations
} // namespace ros

#endif // MAPPING_MESSAGE_OBJECT_DETECTED_INFO_H

