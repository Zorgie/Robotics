"""autogenerated by genpy from vision/evidence.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg
import genpy
import sensor_msgs.msg

class evidence(genpy.Message):
  _md5sum = "c87530fec10bb92b5c423fc1fe40d94e"
  _type = "vision/evidence"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#### Time stamp of the msg ####
time stamp

#### Group number (0-9)####
uint8 group_number

#### Image which shows detected object ####
sensor_msgs/Image image_evidence

#### String for indicating which object was recognized in the image, if any ####
string object_id

# object_id should be one of the following
# ''  : empty string, this means no object was recognized
# 'tomato'
# 'lion'
# 'giraffe'
# 'lemon'
# 'banana'
# 'pepper'
# 'watermellon'
# 'tiger'
#  etc....


================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of cameara
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in src/image_encodings.cpp

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['stamp','group_number','image_evidence','object_id']
  _slot_types = ['time','uint8','sensor_msgs/Image','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stamp,group_number,image_evidence,object_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(evidence, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.group_number is None:
        self.group_number = 0
      if self.image_evidence is None:
        self.image_evidence = sensor_msgs.msg.Image()
      if self.object_id is None:
        self.object_id = ''
    else:
      self.stamp = genpy.Time()
      self.group_number = 0
      self.image_evidence = sensor_msgs.msg.Image()
      self.object_id = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2IB3I.pack(_x.stamp.secs, _x.stamp.nsecs, _x.group_number, _x.image_evidence.header.seq, _x.image_evidence.header.stamp.secs, _x.image_evidence.header.stamp.nsecs))
      _x = self.image_evidence.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.image_evidence.height, _x.image_evidence.width))
      _x = self.image_evidence.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_BI.pack(_x.image_evidence.is_bigendian, _x.image_evidence.step))
      _x = self.image_evidence.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.object_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.image_evidence is None:
        self.image_evidence = sensor_msgs.msg.Image()
      end = 0
      _x = self
      start = end
      end += 21
      (_x.stamp.secs, _x.stamp.nsecs, _x.group_number, _x.image_evidence.header.seq, _x.image_evidence.header.stamp.secs, _x.image_evidence.header.stamp.nsecs,) = _struct_2IB3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_evidence.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.image_evidence.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.image_evidence.height, _x.image_evidence.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_evidence.encoding = str[start:end].decode('utf-8')
      else:
        self.image_evidence.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.image_evidence.is_bigendian, _x.image_evidence.step,) = _struct_BI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_evidence.data = str[start:end].decode('utf-8')
      else:
        self.image_evidence.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.object_id = str[start:end].decode('utf-8')
      else:
        self.object_id = str[start:end]
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2IB3I.pack(_x.stamp.secs, _x.stamp.nsecs, _x.group_number, _x.image_evidence.header.seq, _x.image_evidence.header.stamp.secs, _x.image_evidence.header.stamp.nsecs))
      _x = self.image_evidence.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.image_evidence.height, _x.image_evidence.width))
      _x = self.image_evidence.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_BI.pack(_x.image_evidence.is_bigendian, _x.image_evidence.step))
      _x = self.image_evidence.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.object_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.image_evidence is None:
        self.image_evidence = sensor_msgs.msg.Image()
      end = 0
      _x = self
      start = end
      end += 21
      (_x.stamp.secs, _x.stamp.nsecs, _x.group_number, _x.image_evidence.header.seq, _x.image_evidence.header.stamp.secs, _x.image_evidence.header.stamp.nsecs,) = _struct_2IB3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_evidence.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.image_evidence.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.image_evidence.height, _x.image_evidence.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_evidence.encoding = str[start:end].decode('utf-8')
      else:
        self.image_evidence.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.image_evidence.is_bigendian, _x.image_evidence.step,) = _struct_BI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_evidence.data = str[start:end].decode('utf-8')
      else:
        self.image_evidence.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.object_id = str[start:end].decode('utf-8')
      else:
        self.object_id = str[start:end]
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2I = struct.Struct("<2I")
_struct_2IB3I = struct.Struct("<2IB3I")
_struct_BI = struct.Struct("<BI")
